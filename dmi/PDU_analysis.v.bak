
/*******************************************************************
File name   			:	dmi_top.v
Function    			:	1.analysis the pdu ;
								2.provides pins connect with external module;
 
Version maintenance	:	zourenbo
Version     			:	V1.0
data        			:	2010-12-13
*******************************************************************/

/***************************   modify record   *********************

**************************************************************************
**************************************************************************/

module  PDU_analysis(
		input wire  i_clk,
		input wire  i_rst_n,
		
		input wire  i_Rx_dv,
		input wire [3:0] i_recv_data,
		
		output reg  [47:0] o_dest_mac ,
		output reg  [15:0] o_pkg_type ,
		output reg  [7:0]  o_frt_type ,
		output reg  [7:0]  o_msgid ,
		output reg [15:0] recv_addr 
);


reg [3:0] Nextstate , State ;
reg pkg_flag;

parameter  IDLE = 4'b0000 ;
parameter  RECV_PRENUM = 4'b0001 ;
parameter  RECV_DATA = 4'b0010 ;
parameter  RECV_DONE = 4'b0011 ;


//reg [7:0] recv_addr ;


/**************analysis the receive data************************/
always @(posedge i_clk or negedge i_rst_n)
begin
	if(!i_rst_n)
	begin
	Nextstate <= IDLE ;
	end
	else 
	case(Nextstate)
	IDLE:
		if(i_Rx_dv)
		Nextstate <= RECV_PRENUM ;
		else
		Nextstate <= IDLE ;
	RECV_PRENUM:            //receive pre num
		if(!i_Rx_dv)
		Nextstate <= IDLE ;
		else if(i_recv_data == 4'hd)
		Nextstate <= RECV_DATA ;
		else 
		Nextstate <= RECV_PRENUM ;		
	RECV_DATA:        //receive the data
		if(!i_Rx_dv)
		Nextstate <= RECV_DONE ;
		else
		Nextstate <= RECV_DATA ;	
	RECV_DONE:      //receive done
		Nextstate <= IDLE ;		
	default:
		Nextstate <= IDLE ;		
	endcase	
end
/********************end**************************/



/**************generate the receive address************************/
always @(posedge i_clk or negedge i_rst_n)
begin
	if(!i_rst_n)
	begin
		recv_addr <= 16'd0 ;
	end
	else 
	case(Nextstate)
	IDLE,RECV_PRENUM,RECV_DONE:
		begin
		recv_addr <= 16'd0 ;
		end		
	RECV_DATA:
		begin
		recv_addr <= recv_addr + 16'd1 ;
		end	
	default:
		begin
		recv_addr <= 16'd0 ;
		end	
	endcase	
end
/********************end**************************/


always @(posedge i_clk or negedge i_rst_n)
begin
	if(!i_rst_n)
	begin
		pkg_flag <= 1'b0 ;
	end
	else if(Nextstate == RECV_DATA)
	begin
		pkg_flag <= 1'b1 ;
	end
	else if(Nextstate == RECV_DONE)
	begin
		pkg_flag <= 1'b0 ;	
	end
	else
	begin
		pkg_flag <= pkg_flag ;
	end	
end






/*******save the type of the pdu,such as frt,arp ...********/
always @(posedge i_clk or negedge i_rst_n)
begin
	if(!i_rst_n)
	begin
	o_pkg_type <= 16'b0 ;
	end
	else if(recv_addr == 16'd24) 
	begin
	o_pkg_type[11:8] <= i_recv_data ;    //  
	end
	else if(recv_addr == 16'd25) 
	begin
	o_pkg_type[15:12] <= i_recv_data ;    //  
	end
	else if(recv_addr == 16'd26) 
	begin
	o_pkg_type[3:0] <= i_recv_data ; 
	end	
	else if(recv_addr == 16'd27)
	begin
	o_pkg_type[7:4] <= i_recv_data ; 
	end
	else if(pkg_flag == 1'b0)
	begin
	o_pkg_type <= 16'h0;   
	end		
	else 
	begin
	o_pkg_type <= o_pkg_type;    //others
	end			
end
/*********************end*************************/



/*******save the type of the frt pdu,such as frt,ptp,mm...********/
always @(posedge i_clk or negedge i_rst_n)
begin
	if(!i_rst_n)
	begin
	o_frt_type <= 8'b0 ;
	end
	else if(recv_addr == 16'd29) 
	begin
	o_frt_type[7:4] <= i_recv_data ;    //  
	end
	else if(recv_addr == 16'd28) 
	begin
	o_frt_type[3:0] <= i_recv_data ;    //  
	end
	else if(pkg_flag == 1'b0)
	begin
	o_frt_type <= 8'h0;   
	end
	else 
	begin
	o_frt_type <= o_frt_type;    //others
	end			
end
/*********************end*************************/


/*******save the message id  of the  pdu********/
always @(posedge i_clk or negedge i_rst_n)
begin
	if(!i_rst_n)
	begin
	o_msgid <= 8'b0 ;
	end
	else if(recv_addr == 16'd30) 
	begin
	o_msgid[7:4] <= i_recv_data ;    //  
	end
	else if(recv_addr == 16'd31) 
	begin
	o_msgid[3:0] <= i_recv_data ;    //  
	end
	else if(pkg_flag == 1'b0)
	begin
	o_msgid <= 8'h0;   
	end
	else 
	begin
	o_msgid <= o_msgid;    //others
	end			
end
/*********************end*************************/


/*******save the dest mac   of the  pdu********/
always @(posedge i_clk or negedge i_rst_n)
begin
	if(!i_rst_n)
	begin
	o_dest_mac <= 48'b0 ;
	end
	else if(recv_addr == 16'd10) 
	begin
	o_dest_mac[3:0] <= i_recv_data ;    //  
	end
	else if(recv_addr == 16'd11) 
	begin
	o_dest_mac[7:4] <= i_recv_data ;    //  
	end
	else if(recv_addr == 16'd8) 
	begin
	o_dest_mac[11:8] <= i_recv_data ; 
	end	
	else if(recv_addr == 16'd9)
	begin
	o_dest_mac[15:12] <= i_recv_data ; 
	end
	else if(recv_addr == 16'd6) 
	begin
	o_dest_mac[19:16] <= i_recv_data ;    //  
	end
	else if(recv_addr == 16'd7) 
	begin
	o_dest_mac[23:20] <= i_recv_data ;    //  
	end
	else if(recv_addr == 16'd4) 
	begin
	o_dest_mac[27:24] <= i_recv_data ; 
	end	
	else if(recv_addr == 16'd5)
	begin
	o_dest_mac[31:28] <= i_recv_data ; 
	end
	else if(recv_addr == 16'd2)
	begin
	o_dest_mac[35:32] <= i_recv_data ; 
	end
	else if(recv_addr == 16'd3) 
	begin
	o_dest_mac[39:36] <= i_recv_data ;    //  
	end
	else if(recv_addr == 16'd0) 
	begin
	o_dest_mac[43:40] <= i_recv_data ;    //  
	end
	else if(recv_addr == 16'd1) 
	begin
	o_dest_mac[47:44] <= i_recv_data ; 
	end	
	else if(pkg_flag == 1'b0)
	begin
	o_dest_mac <= 48'b0 ;
	end
	else 
	begin
	o_dest_mac <= o_dest_mac;    //others
	end			
end
/*********************end*************************/




endmodule 