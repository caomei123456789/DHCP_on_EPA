/*******************************************************************
File name   			:	write_emib.v
Function    			:	1.write  data from mm to emib module
 
Version maintenance	:	zourenbo
Version     			:	V1.0
data        			:	2010-12-13
*******************************************************************/

/***************************   modify record   *********************

**************************************************************************
**************************************************************************/
`include "../master_rtl/emib/emib_DEF.v"
module  write_emib 
		(
		input wire i_clk,
		input wire i_rst_n,
		
//		input wire [15:0]  dobjid,
//		input wire [15:0]  subidx,		
		
		input wire i_wr_en,
		input wire i_error,
		input wire [`RAM_WIDTH-1:0] i_mm_to_emib_data,
		input wire [`ADDR_SZ-1:0] i_mm_data_len,
		output reg [`RAM_WIDTH-1:0] o_emib_data,
		output reg [`ADDR_SZ-1:0] o_emib_addr,
		output reg o_wr_en,
		output reg o_write_error,
		output reg o_write_done
);


reg [2:0] State,Nextstate;

reg [`ADDR_SZ-1:0] ptr_write ;

reg [`RAM_WIDTH-1:0] mm_to_emib_data_temp1,mm_to_emib_data_temp2;

parameter IDLE = 3'b000;
parameter WRITE_EMIB = 3'b001;
parameter WRITE_DONE = 3'b010;
parameter JUGE_ERR = 3'b011;
parameter WRITE_ERR = 3'b100;


always @(posedge i_clk )
begin
	mm_to_emib_data_temp1 <= i_mm_to_emib_data;
	mm_to_emib_data_temp2 <= mm_to_emib_data_temp1 ;
end 


always @(posedge i_clk or negedge i_rst_n)
begin
	if(!i_rst_n)
	begin
	State <= 2'b0 ;
	end
	else
	begin
	State <= Nextstate ;
	end
end


always @(*)
begin
	if(!i_rst_n)
	begin
	Nextstate = IDLE;
	end
	else 
	case(State)
	IDLE:
		begin
		if(i_wr_en)
		Nextstate =  JUGE_ERR;
		else
		Nextstate = IDLE;		
		end
	JUGE_ERR:                          //judge error or not
		begin	
		if(!i_error)
			Nextstate = WRITE_EMIB;
		else 
			Nextstate = WRITE_ERR;
		end
	WRITE_EMIB:                      // write emib 
		begin
		if(ptr_write >= i_mm_data_len )
		Nextstate = WRITE_DONE;
		else
		Nextstate = WRITE_EMIB;		
		end		
	WRITE_DONE:                   //write finish
		Nextstate = IDLE;	
	WRITE_ERR:                   //write error
		Nextstate = IDLE;	
	default:
		Nextstate = IDLE;		
	endcase
end




always @(posedge i_clk or negedge i_rst_n)
begin
	if(!i_rst_n)
	begin
		o_wr_en <= 1'b0;
		o_emib_data<=`RAM_WIDTH'b0; 
		o_emib_addr	<= `ADDR_SZ'b0;	
		o_write_error <= 1'b0 ;	
		o_write_done <= 1'b0;
	end
	else
	case(Nextstate)	
	IDLE,JUGE_ERR:
		begin
		o_wr_en <= 1'b0;
		o_emib_data<=`RAM_WIDTH'b0; 
		o_emib_addr	<= `ADDR_SZ'b0;	
		o_write_error <= 1'b0 ;
		o_write_done <= 1'b0;
		end
	WRITE_EMIB:
		begin
		o_wr_en <= 1'b1;
		o_emib_data<= mm_to_emib_data_temp1; 
		o_emib_addr <= ptr_write ;
		o_write_error <= 1'b0 ;
		o_write_done <= 1'b0;
		end	
	WRITE_DONE:
		begin
		o_wr_en <= 1'b0;
		o_emib_data<=`RAM_WIDTH'b0; 
		o_emib_addr	<= `ADDR_SZ'b0;	
		o_write_error <= 1'b0 ;
		o_write_done <= 1'b1;	
		end
	WRITE_ERR:
		begin
		o_wr_en <= 1'b0 ;
		o_emib_data<=`RAM_WIDTH'b0; 
		o_emib_addr	<= `ADDR_SZ'b0;	
		o_write_error <= 1'b1 ;
		o_write_done <= 1'b0;
		end
	default:
		begin
		o_wr_en <= 1'b0;
		o_emib_data<=`RAM_WIDTH'b0; 
		o_emib_addr	<= `ADDR_SZ'b0;	
		o_write_error <= 1'b0 ;
		o_write_done <= 1'b0;
		end	
	endcase
end



/****************generate write emib address*********************/
always @(posedge i_clk or negedge i_rst_n)
begin
	if(!i_rst_n)
	begin
	ptr_write <= `ADDR_SZ'b0 ;
	end
	else if((Nextstate == WRITE_EMIB)&&(ptr_write < i_mm_data_len))
	begin
	ptr_write <= ptr_write + 1'b1;
	end
	else
	begin
	ptr_write <= `ADDR_SZ'b0 ;
	end
end
/*************************end***********************************/

endmodule
