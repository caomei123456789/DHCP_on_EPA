/*******************************************************************
File name   			:	commen_data.v
Function    			:	1.output the commen data to other modules
 
Version maintenance	:	zourenbo
Version     			:	V1.0
data        			:	2010-12-13
*******************************************************************/

/***************************   modify record   *********************

**************************************************************************
**************************************************************************/
`include "../master_rtl/emib/emib_DEF.v"
module  frt_link_index(
		input  wire i_clk,
		input  wire i_rst_n,
		
		input wire [31:0] i_frt_ip,
		output reg [15:0] o_frt_type,
		input wire [15:0] i_frt_service_role,
		
		output reg [15:0] o_frt_offset_len,
		output reg [15:0] o_frt_data_offset,
				
		input wire i_frt_index_irq,
		
		output reg o_frt_index_done,
		
		output reg [`ADDR_SZ-1:0] o_emib_addr,
		
		output reg o_rd_ram_en,
		
		input wire [15:0] i_emib_data
		
);
reg [3:0] State,Nextstate;


reg [31:0] ip_list;
reg [15:0] role_list,type_list;
reg [3:0] State_dly1,State_dly2,State_dly3,State_dly4;

parameter  IDLE = 4'b0000;
parameter  COMPARE_IP1 = 4'b0001;
parameter  COMPARE_IP2 = 4'b0010;
parameter  COMPARE_ROLE = 4'b0011;
parameter  OUTPUT_TYPE = 4'b0100;
parameter  COMPARE_NEXT_IP1 = 4'b0101;
parameter  COMPARE_NEXT_IP2 = 4'b0110;
parameter  COMPARE_NEXT_IP3 = 4'b0111;
parameter  OUTPUT_DATA_LEN = 4'b1001;
parameter  OUTPUT_DATA_OFFSET = 4'b1010;
parameter  COMPARE_DONE = 4'b1011;
parameter  COMPARE_ERROR = 4'b1101;

//state1
always @(posedge i_clk or negedge i_rst_n)
begin
	if(!i_rst_n)
	begin
	State <= IDLE;
	State_dly1 <= IDLE;
	State_dly2 <= IDLE;
	State_dly3 <= IDLE;
	State_dly4 <= IDLE;
	end
	else
	begin
	State <= Nextstate;	
	State_dly1 <= State;	
	State_dly2 <= State_dly1;
	State_dly3 <= State_dly2;
	State_dly4 <= State_dly3;
	end
end

//state2
always @(*)
begin
	if(!i_rst_n)
	begin
	Nextstate = IDLE;
	end
	else
	case(State_dly4)//
	IDLE:
		begin
		if(i_frt_index_irq)
		Nextstate = COMPARE_IP1;	   
		else
		Nextstate = IDLE;			
		end
	COMPARE_IP1:                       //compare ip low 16 bit
		begin
		if(ip_list[15:0] == i_frt_ip[15:0])
		Nextstate = COMPARE_IP2;	
		else
		Nextstate = COMPARE_NEXT_IP1;			
		end
	COMPARE_IP2:                      //compare ip high 16 bit
		begin
		if(ip_list[31:16] == i_frt_ip[31:16])
		Nextstate = COMPARE_ROLE;	
		else
		Nextstate = COMPARE_NEXT_IP2;			
		end
	COMPARE_ROLE:                    //compare role
		begin
		if(i_frt_service_role == role_list)
		Nextstate = OUTPUT_TYPE;	
		else
		Nextstate = COMPARE_NEXT_IP3;			
		end		
	OUTPUT_TYPE:                    //output type
		begin
		Nextstate = OUTPUT_DATA_LEN;			
		end	
	OUTPUT_DATA_LEN:               //output data length
		begin
 		Nextstate = OUTPUT_DATA_OFFSET;	
		end	
	OUTPUT_DATA_OFFSET:           //output data offset
		begin
 		Nextstate = COMPARE_DONE;	
		end			
	COMPARE_NEXT_IP1,COMPARE_NEXT_IP2,COMPARE_NEXT_IP3:  //compare next ip
		begin
		if(ip_list[15:0] == i_frt_ip[15:0])
		Nextstate = COMPARE_IP2;	
		else if(o_emib_addr >= `ADDR_SZ'd1000)
		Nextstate = COMPARE_ERROR;	
		else	
		Nextstate = COMPARE_NEXT_IP1;			
		end		
	COMPARE_DONE:                    //compare done        
		Nextstate = IDLE;	
	COMPARE_ERROR:
		Nextstate = IDLE;	
	default :
		Nextstate = IDLE;				
	endcase
	
end


always @(posedge i_clk or negedge i_rst_n)
begin
	if(!i_rst_n)
	begin
	o_emib_addr <= `ADDR_SZ'd503 ;
	o_frt_index_done <= 1'b0 ;
	o_rd_ram_en <= 1'b0 ;
	end
	else
	case(Nextstate)
	IDLE:
		begin
		o_emib_addr <= `ADDR_SZ'd503 ;	
		o_frt_index_done <= 1'b0 ;
		o_rd_ram_en <= 1'b0 ;
		end
	COMPARE_IP1:
		begin
		o_emib_addr <= o_emib_addr;
		o_rd_ram_en <= 1'b1 ;
		end
	COMPARE_IP2:
		begin
		o_emib_addr <= o_emib_addr + `ADDR_SZ'd01;
		o_rd_ram_en <= 1'b1 ;
		end
	COMPARE_ROLE:
		begin
		o_emib_addr <= o_emib_addr - `ADDR_SZ'd02;
		o_rd_ram_en <= 1'b1 ;
		end		
	OUTPUT_TYPE:
		begin
		o_emib_addr <= o_emib_addr - `ADDR_SZ'd01;
		o_rd_ram_en <= 1'b1 ;
		end		
	OUTPUT_DATA_LEN:
		begin
		o_emib_addr <= o_emib_addr + `ADDR_SZ'd04;
		o_rd_ram_en <= 1'b1 ;
		end	
	OUTPUT_DATA_OFFSET:
		begin
		o_emib_addr <= o_emib_addr + `ADDR_SZ'd01;//
		o_rd_ram_en <= 1'b1 ;
		end
 	COMPARE_NEXT_IP1:	
		begin
		o_emib_addr <= o_emib_addr + `ADDR_SZ'd06;
		o_rd_ram_en <= 1'b1 ;
		end
 	COMPARE_NEXT_IP2:	
		begin
		o_emib_addr <= o_emib_addr + `ADDR_SZ'd05;
		o_rd_ram_en <= 1'b1 ;
		end	
 	COMPARE_NEXT_IP3:	
		begin
		o_emib_addr <= o_emib_addr + `ADDR_SZ'd07;
		o_rd_ram_en <= 1'b1 ;
		end	
	COMPARE_DONE:
		begin
		o_emib_addr <= `ADDR_SZ'd503 ;		
		o_frt_index_done <= 1'b1 ;
		o_rd_ram_en <= 1'b0 ;
		end		
	COMPARE_ERROR:
		begin
		o_emib_addr <= `ADDR_SZ'd503 ;
		o_rd_ram_en <= 1'b0 ;	
		end
	default :
		begin
		o_emib_addr <= `ADDR_SZ'd503 ;	
		o_frt_index_done <= 1'b0 ;
		o_rd_ram_en <= 1'b0 ;
		end
	endcase
	
end



/******************ip list in ram*************************/
always @(posedge i_clk or negedge i_rst_n)
begin
	if(!i_rst_n)
	begin
	ip_list <=  32'h0 ;
	end
	else if(State_dly3 == COMPARE_IP1)
	begin
	ip_list[15:0] <=  i_emib_data ;	
	end
	else if(State_dly3 == COMPARE_IP2)
	begin
	ip_list[31:16] <=  i_emib_data ;	
	end	
	else 
	begin
	ip_list <=  32'h0 ;
	end	
end
/******************end***********************/


/***************output frt type******************/
always @(posedge i_clk or negedge i_rst_n)
begin
	if(!i_rst_n)
	begin
	o_frt_type <=  16'h0 ;
	end
	else if(State_dly3 == OUTPUT_TYPE)
	begin
	o_frt_type  <=  i_emib_data ;	
	end
	else 
	begin
	o_frt_type <=  o_frt_type ;
	end	
end
/******************end***********************/

/***************role list in ram******************/
always @(posedge i_clk or negedge i_rst_n)
begin
	if(!i_rst_n)
	begin
	role_list <=  16'h0 ;
	end
	else if(State_dly3 == COMPARE_ROLE)
	begin
	role_list  <=  i_emib_data ;	
	end
	else 
	begin
	role_list <=  16'h0 ;
	end	
end
/******************end***********************/

/***************output frt data  len******************/
always @(posedge i_clk or negedge i_rst_n)
begin
	if(!i_rst_n)
	begin
	o_frt_offset_len <=  16'h0 ;
	end
	else if(State_dly3 == OUTPUT_DATA_LEN)
	begin
	o_frt_offset_len  <=  i_emib_data ;	
	end
	else
	begin
	o_frt_offset_len  <=  o_frt_offset_len ;	
	end	
end
/******************end***********************/

/***************output frt data offset ******************/
always @(posedge i_clk or negedge i_rst_n)
begin
	if(!i_rst_n)
	begin
	o_frt_data_offset <=  16'h0 ;
	end
	else if(State_dly3 == OUTPUT_DATA_OFFSET)
	begin
	o_frt_data_offset  <=  i_emib_data ;	
	end
	else 
	begin
	o_frt_data_offset  <=  o_frt_data_offset ;	
	end	
end
/******************end***********************/


endmodule 